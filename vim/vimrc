"-----------------------------------------------------------------------------------------------------Vundle 配置
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'tomasr/molokai'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'trusktr/seti.vim'
Plugin 'terryma/vim-multiple-cursors'               " 多行编辑
Plugin 'Raimondi/delimitMate'
Plugin 'Valloric/YouCompleteMe'
Plugin 'fatih/vim-go'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tell-k/vim-autopep8'
Plugin 'kien/ctrlp.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'arthuryangcs/tagbar'
Plugin 'arthuryangcs/vim-bufkill'
Plugin 'dyng/ctrlsf.vim'
Plugin 'derekwyatt/vim-fswitch'
Plugin 'sjl/gundo.vim'                              " 树形显示 undo 操作
" Plugin 'scrooloose/syntastic'
Plugin 'arthuryangcs/vim-polyglot'
Plugin 'ShowTrailingWhitespace'                     " 显示行尾的空白字符
Plugin 'luochen1990/rainbow'                        " 彩虹括号
Plugin 'tpope/vim-fugitive'                         " Git 文件修改提示
Plugin 'w0rp/ale'                                   " 异步代码检测工具
Plugin 'mileszs/ack.vim'                            " 代码搜索
Plugin 'airblade/vim-gitgutter'                     " Git diff


call vundle#end()
filetype plugin indent on

"------------------------------------------------------------------------------------------------------ 基本配置

"关闭vi的一致性模式 避免以前版本的一些Bug和局限
set nocompatible
"配置backspace键工作方式
set backspace=indent,eol,start

"显示行号
set number
"设置在编辑过程中右下角显示光标的行列信息
set ruler
"当一行文字很长时取消换行
" set nowrap

" 搜索高亮
set hlsearch

"在状态栏显示正在输入的命令
set showcmd

"设置历史记录条数
set history=1000

"设置取消备份 禁止临时文件生成
set nobackup
set noswapfile

"设置匹配模式 类似当输入一个左括号时会匹配相应的那个右括号
set showmatch

"设置C/C++方式自动对齐
set autoindent
set cindent

"开启语法高亮功能
syntax enable
syntax on

colorscheme molokai
let g:rehash256 = 1
let g:molokai_original = 1

"指定配色方案为256色
set t_Co=256

"突出现实当前行列
set cursorline
"set cursorcolumn
highlight CursorLine   cterm=NONE ctermbg=238 ctermfg=NONE guibg=NONE guifg=NONE

"设置搜索时忽略大小写
set ignorecase smartcase

"设置在Vim中可以使用鼠标 防止在Linux终端下无法拷贝
set mouse=a

"设置Tab宽度
set tabstop=4
"设置自动对齐空格数
set shiftwidth=4
"设置按退格键时可以一次删除4个空格
set softtabstop=4
"设置按退格键时可以一次删除4个空格
set smarttab
"将Tab键自动转换成空格 真正需要Tab键时使用[mtrl + V + Tab]
set expandtab

"设置编码方式
set encoding=utf-8
"自动判断编码时 依次尝试一下编码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

"设置换行符为unix
set ff=unix

set hidden " 避免必须保存修改才可以跳转buffer

"检测文件类型
filetype on
"针对不同的文件采用不同的缩进方式
filetype indent on
"允许插件
filetype plugin on
"启动智能补全
filetype plugin indent on

" 文件修改之后自动载入
set autoread
au CursorHold * checktime

"文件到上次编辑的位置
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" leader 键
let mapleader = ","

"距离顶部和底部5行
set scrolloff=5

"撤销
set undofile                " Save undo's after file closes
" Let's save undo info!
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "", 0700)
endif
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
set foldlevel=99
" 代码折叠自定义快捷键 <leader>zz
let g:FoldMethod = 0
map <leader>zz :call ToggleFold()<cr>
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun

"-----------------------------------------------------------------------------------------------------NERDTree 配置
nmap <leader>ne :NERDTree<CR>
nmap <leader>nc :NERDTreeClose<CR>

let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
"NERDTree中打开文件后自动关闭NERDTree窗口
" let NERDTreeQuitOnOpen=1
"NERDTree 中忽略的文件类型
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
" 显示隐藏文件
let NERDTreeShowHidden=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1

"----------------------------------------------------------------------------------------------------airline 配置
let g:airline#extensions#tabline#enabled = 1
" tabline 显示编号
"let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_theme='molokai'
set laststatus=2

" 自动补全单引号，双引号等
let delimitMate_expand_cr = 1
" for python docstring ", 特别有用
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭某些类型文件的自动补全
au FileType mail let b:delimitMate_autoclose = 0

"----------------------------------------------------------------------------------------------------- for ycm
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
"打开vim时不再询问是否加载ycm_extra_conf.py配置"
let g:ycm_confirm_extra_conf=0
set completeopt=longest,menu
let g:ycm_python_binary_path = 'python'
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
nnoremap <leader>gf :YcmCompleter FixIt<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmDiags<CR>

"----------------------------------------------------------------------------------------------------- gundo 配置
" 调用 gundo 树
nnoremap <Leader>ud :GundoToggle<CR>

" ----------------------------------------------------------------------------------------------------- syntastic 配置
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" let g:syntastic_python_checkers = ['pylint']
" let g:syntastic_go_checkers = ['gofmt', 'go', 'gofmt', 'gometalinter', 'govet']

" ----------------------------------------------------------------------------------------------------- autopep8设置
let g:autopep8_disable_show_diff=1

" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims=1

set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|jpg|png|jpeg)$',
  \ }

nmap <leader>tb :TagbarOpen fj<CR>
nmap <leader>tc :TagbarClose<CR>
" let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_width = 40
let g:tagbar_zoomwidth = 0
let g:tagbar_sort = 0

" buffer快速导航
nnoremap <leader>b :bp<CR>
nnoremap <leader>f :bn<CR>

" 查看buffers
nnoremap <leader>l :ls<CR>

" 关闭buffers
nnoremap <leader>d :BD<CR>

" 通过索引快速跳转
"nnoremap <leader>1 :1b<CR>
"nnoremap <leader>2 :2b<CR>
"nnoremap <leader>3 :3b<CR>
"nnoremap <leader>4 :4b<CR>
"nnoremap <leader>5 :5b<CR>
"nnoremap <leader>6 :6b<CR>
"nnoremap <leader>7 :7b<CR>
"nnoremap <leader>8 :8b<CR>
"nnoremap <leader>9 :9b<CR>
"nnoremap <leader>0 :10b<CR>

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

" 选择复制模式，关闭其他窗口，关闭行数
nnoremap <leader>y <C-w>o :set nu!<CR>

" ctrlsf 配置
nmap <leader>cf :CtrlSF<CR>
vmap <leader>cf <Plug>CtrlSFVwordExec
nnoremap <leader>ct :CtrlSFToggle<CR>

" 一键编译
nmap <Leader>m :wa<CR>:make<CR><CR>:botright cwindow<CR>
nmap <Leader>w :botright cwindow<CR>
nmap <leader>j :cn<CR>
nmap <leader>k :cp<CR>

" " 关闭当前分割窗口
" nmap <Leader>q :q<CR>

" " 保存当前窗口内容
" nmap <Leader>w :w<CR>

" " 保存关闭当前窗口
" nmap <Leader>x :x<CR>

" 复制模式
nnoremap <leader>; :set paste!<CR>

" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" *.cpp 和 *.h 间切换
nmap <silent> <Leader>sw :FSHere<cr>

" 降低更新时间
set updatetime=500

" 开启彩虹括号
let g:rainbow_active = 1

" ------------------------------------------------------------------------------------------------------ Fugitive 相关配置
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gf :Gdiff<CR>
nnoremap <leader>gl :Glog<CR>

" ----------------------------------------------------------------------------------------------------- ale 相关配置
" 保持侧边栏可见
let g:ale_sign_column_always = 1
" 自定义跳转错误行
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)


" ----------------------------------------------------------------------------------------------------- ack 相关配置
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
